{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/cafein_server/client/src/components/Map.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Map.css';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\n\nimport CafeMarker from './Cafemarker';\n\nconst useAxios = url => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  const [trigger, setTrigger] = useState(0);\n\n  const refetch = () => {\n    setState({\n      loading: true\n    });\n    setTrigger(Date.now());\n  };\n\n  const getData = async () => {\n    const result = await axios.post(url);\n    setState({\n      data: result.data,\n      loading: false,\n      error: null\n    });\n\n    if (result.error) {\n      setState({\n        data: result.data,\n        loading: false,\n        error: result.error\n      });\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [trigger]);\n\n  if (!url) {\n    return;\n  }\n\n  return {\n    state,\n    refetch\n  };\n};\n\nconst getCurrentLocation = async () => {\n  if (navigator.geolocation) {\n    // GPS를 지원하면\n    navigator.geolocation.getCurrentPosition(function (position) {\n      console.log(position.coords.latitude + ' ' + position.coords.longitude);\n      return {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n    }, function (error) {\n      console.error(error);\n    }, {\n      enableHighAccuracy: false,\n      maximumAge: 0,\n      timeout: Infinity\n    });\n  } else {\n    console.log('GPS를 지원하지 않습니다');\n    return {\n      lat: 37.5668144,\n      lng: 126.9783882\n    };\n  }\n};\n/*\nvar watchId = navigator.geolocation.watchPosition(function(position) {\n  console.log(position.coords);\n  console.log(watchId);\n});\n*/\n\n\nconst Map = () => {\n  const {\n    state,\n    refetch\n  } = useAxios(\"/getcafes\");\n  const {\n    data,\n    loading,\n    error\n  } = state; //getCurrentLocation();\n\n  let mapRef;\n  let [mapBounds, setBounds] = useState(0);\n  let [center, setCenter] = useState(0);\n  let [zoom, setZoom] = useState(0);\n  let [pos, setPos] = useState(0);\n  useEffect(async () => {\n    const getpos = await getCurrentLocation();\n    console.log(getpos);\n    setCenter(getpos);\n    console.log(\"SET!!\");\n  }, [pos]);\n  useEffect(() => {\n    setBounds(mapRef.getBounds());\n    console.log(center);\n  }, [center]);\n  useEffect(() => {\n    setBounds(mapRef.getBounds());\n  }, [center]);\n  const cafes = data;\n  let render_cafes = [];\n\n  if (cafes) {\n    let d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n\n    let cur_hour = d.getHours();\n\n    for (let i = 0; i < cafes.length; i++) {\n      // 마커 이미지를 생성합니다\n      const regex = /[\\[\\]]/;\n      let arr = cafes[i].busy.split(regex);\n      let filtered = arr.filter(function (el) {\n        return el !== \"\" && el !== \", \";\n      });\n      let cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n      let cur_busy_color;\n\n      if (cur_busy >= 80) {\n        // red (Busy : 80-100)\n        cur_busy_color = \"red\";\n      } else if (cur_busy >= 40) {\n        // yellow (Busy : 40-59)\n        cur_busy_color = \"yellow\";\n      } else if (cur_busy >= 0) {\n        // green (Busy : 0-39)\n        cur_busy_color = \"green\";\n      } else if (cur_busy == -1) {\n        // grey (Busy : not_opened)\n        cur_busy_color = \"grey\";\n      } else {\n        //예외처리\n        console.log(\"it is wrong busy data\");\n        continue;\n      }\n\n      cafes[i]['cur_busy_color'] = cur_busy_color;\n      cafes[i]['cur_busy'] = cur_busy.toString();\n      const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n      // mapBounds 안에 있는 marker만 render 하도록 \n\n      if (mapBounds && mapBounds.hasLatLng(navermaps.LatLng(cafes[i].lat, cafes[i].lon))) {\n        render_cafes.push(cafes[i]);\n      }\n    }\n  } //const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n  //\t\t<button onClick={refetch}>Refetch</button> \n  //\t\t<h2>{loading && \"Loading\" }</h2>\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(NaverMap, {\n    mapDivId: 'maps-getting-started-uncontrolled' // default: react-naver-map\n    ,\n    naverRef: ref => {\n      mapRef = ref;\n    },\n    style: {\n      width: '100%',\n      // 네이버지도 가로 길이\n      height: '100%' // 네이버지도 세로 길이\n\n    },\n    defaultCenter: {\n      lat: 37.5668144,\n      lng: 126.9783882\n    } // 지도 초기 위치\n    ,\n    center: center,\n    defaultZoom: 16 // 지도 초기 확대 배율\n    ,\n    onCenterChanged: center_pos => {\n      setCenter(center_pos);\n    },\n    onZoomChanged: zoomListener => {\n      setZoom(zoomListener);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 4\n    }\n  }, render_cafes && render_cafes.map((cafe, index) => /*#__PURE__*/React.createElement(CafeMarker, {\n    lat: cafe.lat,\n    lng: cafe.lon,\n    busy: cafe.cur_busy,\n    busy_color: cafe.cur_busy_color,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 6\n    }\n  }))));\n};\n\nexport default Map;","map":{"version":3,"sources":["/home/ec2-user/cafein_server/client/src/components/Map.js"],"names":["React","useState","useEffect","axios","NaverMap","CafeMarker","useAxios","url","state","setState","data","loading","error","trigger","setTrigger","refetch","Date","now","getData","result","post","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","lat","lng","enableHighAccuracy","maximumAge","timeout","Infinity","Map","mapRef","mapBounds","setBounds","center","setCenter","zoom","setZoom","pos","setPos","getpos","getBounds","cafes","render_cafes","d","day_of_week","getDay","cur_hour","getHours","i","length","regex","arr","busy","split","filtered","filter","el","cur_busy","cur_busy_color","toString","navermaps","window","naver","maps","hasLatLng","LatLng","lon","push","ref","width","height","center_pos","zoomListener","map","cafe","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Map.css';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\nimport CafeMarker from './Cafemarker';\n\nconst useAxios = (url) => {\n\tconst [state, setState] = useState({\n\t\tdata: null,\n\t\tloading: true,\n\t\terror: null\n\t});\n\n\tconst [trigger, setTrigger] = useState(0);\n\n\tconst refetch = () => { \n\t\tsetState({\n\t\t\tloading: true\n\t\t});\n\t\tsetTrigger(Date.now());\n\t};\n\n\tconst getData = async () => {\n\t\tconst result = await axios.post(url);\n\t\tsetState({\n\t\t\tdata: result.data,\n\t\t\tloading: false,\n\t\t\terror: null\n\t\t});\n\t\tif (result.error) {\n\t\t\tsetState({data:result.data, loading:false, error:result.error});\n\t\t}\n\t};\n\n\tuseEffect(() => { getData(); }, [trigger]);\n\tif (!url) {\n\t\treturn;\n\t}\n\treturn {state, refetch};\n};\n\nconst getCurrentLocation = async () => {\n  if (navigator.geolocation) { // GPS를 지원하면\n    navigator.geolocation.getCurrentPosition(function(position) {\n      console.log(position.coords.latitude + ' ' + position.coords.longitude);\n\t\t\treturn ({lat: position.coords.latitude, lng: position.coords.longitude});\n    }, function(error) {\n      console.error(error);\n    }, {\n      enableHighAccuracy: false,\n      maximumAge: 0,\n      timeout: Infinity\n    });\n  } else {\n    console.log('GPS를 지원하지 않습니다');\n\t\treturn ( {lat: 37.5668144, lng: 126.9783882} );\n  }\n}\n\n/*\nvar watchId = navigator.geolocation.watchPosition(function(position) {\n  console.log(position.coords);\n  console.log(watchId);\n});\n*/\n\nconst Map = () => {\n\tconst { state, refetch } = useAxios(\"/getcafes\");\n\tconst {data, loading, error} = state;\n\t\n\t//getCurrentLocation();\n\tlet mapRef;\n\tlet [mapBounds, setBounds] = useState(0);\n\tlet [center, setCenter] = useState(0);\n\tlet [zoom, setZoom] = useState(0);\n\tlet [pos, setPos] = useState(0);\n\n\tuseEffect(async () => {\n\t\tconst getpos = await getCurrentLocation();\n\t\tconsole.log(getpos);\n\t\tsetCenter(getpos);\n\t\tconsole.log(\"SET!!\");\n\t}, [pos]);\n\n\tuseEffect(() => { \n\t\tsetBounds(mapRef.getBounds());\n\t\tconsole.log(center);\n\t }, [center]);\n\n\n\tuseEffect(() => { \n\t\tsetBounds(mapRef.getBounds());\n\t }, [center]);\n\n\n\tconst cafes = data;\n\tlet render_cafes = [];\n\n\tif (cafes) { \n  \tlet d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n    let cur_hour = d.getHours();\n\t\tfor (let i = 0; i < cafes.length; i ++) {\n\t\t\t// 마커 이미지를 생성합니다\n\n\t\t\tconst regex = /[\\[\\]]/;\n\t\t\tlet arr = cafes[i].busy.split(regex);\n\t\t\tlet filtered = arr.filter(function (el) {\n\t\t\t\treturn el !== \"\" && el !== \", \";\n\t\t\t});\n\n\t\t\tlet cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n\n\t\t\tlet cur_busy_color; \n\t\t\tif (cur_busy >= 80) {\n\t\t\t// red (Busy : 80-100)\n\t\t\t\tcur_busy_color = \"red\"; \n\t\t\t} else if (cur_busy >= 40) {\n\t\t\t// yellow (Busy : 40-59)\n\t\t\t\tcur_busy_color = \"yellow\"; \n\t\t\t} else if (cur_busy >= 0) {\n\t\t\t// green (Busy : 0-39)\n\t\t\t\tcur_busy_color = \"green\"; \n\t\t\t} else if (cur_busy == -1) {\n\t\t\t// grey (Busy : not_opened)\n\t\t\t\tcur_busy_color = \"grey\"; \n\t\t\t} else {\n\t\t\t//예외처리\n\t\t\t\tconsole.log(\"it is wrong busy data\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcafes[i]['cur_busy_color'] = cur_busy_color;\n\t\t\tcafes[i]['cur_busy'] = cur_busy.toString();\n\t\t\t\n \t\t\tconst navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n\n\t\t\t// mapBounds 안에 있는 marker만 render 하도록 \n\t\t\tif (mapBounds && mapBounds.hasLatLng(navermaps.LatLng(cafes[i].lat,cafes[i].lon))){\n\t\t\t\trender_cafes.push(cafes[i]);\n\t\t\t}\n\t\t}\n\t}\n\n \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\t//\t\t<button onClick={refetch}>Refetch</button> \n\t//\t\t<h2>{loading && \"Loading\" }</h2>\n \treturn (\n\t\t<div className=\"map_container\">\n\t\t\t<NaverMap\n\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\tnaverRef={ref => { mapRef = ref}}\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\theight: '100%' // 네이버지도 세로 길이\n\t\t\t\t}}\n\t\t\t\tdefaultCenter={{lat: 37.5668144, lng: 126.9783882}} // 지도 초기 위치\n\t\t\t\tcenter={center}\n\t\t\t\tdefaultZoom={16} // 지도 초기 확대 배율\n\t\t\t\tonCenterChanged={center_pos => { setCenter(center_pos) }}\n\t\t\t\tonZoomChanged={zoomListener => { setZoom(zoomListener) }}\n\t\t\t>\n\t\t\t\t{ render_cafes  && render_cafes.map((cafe, index) => (\n\t\t\t\t\t\n\t\t\t\t\t<CafeMarker lat={cafe.lat} lng={cafe.lon} busy={cafe.cur_busy} busy_color={cafe.cur_busy_color} key={index}/>\n\t\t\t\t))}\n\t\t\n\t\t\t</NaverMap>\n\t\t</div>\n\t);\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}