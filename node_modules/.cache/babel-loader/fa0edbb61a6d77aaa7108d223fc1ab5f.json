{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/cafein_server/client/src/components/Map.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\n\nimport CafeMarker from './Cafemarker';\n\nconst useAxios = url => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  const [trigger, setTrigger] = useState(0);\n\n  const refetch = () => {\n    setState({\n      loading: true\n    });\n    setTrigger(Date.now());\n  };\n\n  const getData = async () => {\n    const result = await axios.post(url);\n    setState({\n      data: result.data,\n      loading: false,\n      error: null\n    });\n\n    if (result.error) {\n      setState({\n        data: result.data,\n        loading: false,\n        error: result.error\n      });\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [trigger]);\n\n  if (!url) {\n    return;\n  }\n\n  return {\n    state,\n    refetch\n  };\n};\n\nconst Map = () => {\n  //const {data, loading, error, refetch} = useAxios(\"/getcafes\");\n  const state = useAxios(\"/getcafes\");\n  const cafes = data;\n  console.log(cafes); //const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n  //const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 4\n    }\n  }, \"Refetch\"), /*#__PURE__*/React.createElement(NaverMap, {\n    mapDivId: 'maps-getting-started-uncontrolled' // default: react-naver-map\n    ,\n    style: {\n      width: '100%',\n      // 네이버지도 가로 길이\n      height: '85vh' // 네이버지도 세로 길이\n\n    },\n    defaultCenter: {\n      lat: 37.554722,\n      lng: 126.970833\n    } // 지도 초기 위치\n    ,\n    defaultZoom: 13 // 지도 초기 확대 배율\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }\n  }, cafes && cafes.map((cafe, index) => /*#__PURE__*/React.createElement(\"cafemarker\", {\n    lat: cafe.lat,\n    lng: cafe.lon,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 6\n    }\n  }))));\n};\n/*\n*/\n\n/*\nclass Map extends React.Component {\n\n  constructor(props) {\n\n\t\tsuper(props);\n\t\tconsole.log(\"BORN NAVER!\")\n\t}\n\n\tstate = {\n\t\tcafes: [],\n\t\tisLoading: true\n\t};\n\n\tgetCafes = async() => {\n\t\tconst {data} = await axios.post(\"/getcafes\");\n\t\tthis.setState(current => ({\n\t\t\tcafes: data, \n\t\t\tisLoading: false\n\t\t}));\n\t}\n\n\tasync\tcomponentDidMount(){\n\t\tawait this.getCafes();\n\t\tconsole.log(\"DID mount!\");\n\t}\n\n\tcomponentDidUpdate(){\n\n\t}\n\t\n\trender() {\n  \t//const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n   \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\n\n\t\tconst {isLoading, cafes} = this.state;\n\n  \treturn (\n\n\n\t\t\t\t<NaverMap\n\t\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\t\theight: '85vh' // 네이버지도 세로 길이\n\t\t\t\t\t}}\n\t\t\t\t\tdefaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\n\t\t\t\t\tdefaultZoom={13} // 지도 초기 확대 배율\n\t\t\t\t>\n\t\t\t\n\t\t\t\t\t{ cafes.map((cafe, index) => (\n\t\t\t\t\t\t<CafeMarker lat={cafe.lat} lng={cafe.lon} key={index}/>\n\t\t\t\t\t))}\n\n\n\t\t\t\t</NaverMap>\n\t\t);\n\t}\n}\n*/\n\n\nexport default Map;","map":{"version":3,"sources":["/home/ec2-user/cafein_server/client/src/components/Map.js"],"names":["React","useState","useEffect","axios","NaverMap","CafeMarker","useAxios","url","state","setState","data","loading","error","trigger","setTrigger","refetch","Date","now","getData","result","post","Map","cafes","console","log","width","height","lat","lng","map","cafe","index","lon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\nimport CafeMarker from './Cafemarker';\n\nconst useAxios = (url) => {\n\n\tconst [state, setState] = useState({\n\t\tdata: null,\n\t\tloading: true,\n\t\terror: null\n\t});\n\n\tconst [trigger, setTrigger] = useState(0);\n\n\tconst refetch = () => { \n\t\tsetState({\n\t\t\tloading: true\n\t\t});\n\t\tsetTrigger(Date.now());\n\n\t};\n\n\tconst getData = async () => {\n\t\tconst result = await axios.post(url);\n\t\tsetState({\n\t\t\tdata: result.data,\n\t\t\tloading: false,\n\t\t\terror: null\n\t\t});\n\t\tif (result.error) {\n\t\t\tsetState({data:result.data, loading:false, error:result.error});\n\t\t}\n\t};\n\tuseEffect(() => { getData(); }, [trigger]);\n\tif (!url) {\n\t\treturn;\n\t}\n\n\treturn {state, refetch};\n\n};\n\n\n\nconst Map = () => {\n\n\t//const {data, loading, error, refetch} = useAxios(\"/getcafes\");\n\tconst state = useAxios(\"/getcafes\");\n\t\n\tconst cafes = data;\n\tconsole.log(cafes);\n\n\n  \t//const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n   \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n \treturn (\n\t\t<div>\n\t\t\t<button onClick={refetch}>Refetch</button>\n\t\t\t<NaverMap\n\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\theight: '85vh' // 네이버지도 세로 길이\n\t\t\t\t}}\n\t\t\t\tdefaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\n\t\t\t\tdefaultZoom={13} // 지도 초기 확대 배율\n\t\t\t>\n\t\t\t\t{ cafes  && cafes.map((cafe, index) => (\n\t\t\t\t\t<cafemarker lat={cafe.lat} lng={cafe.lon} key={index}/>\n\t\t\t\t))}\n\t\t\n\t\t\t</NaverMap>\n\t\t</div>\n\t);\n\n}\n/*\n*/\n/*\nclass Map extends React.Component {\n\n  constructor(props) {\n\n\t\tsuper(props);\n\t\tconsole.log(\"BORN NAVER!\")\n\t}\n\n\tstate = {\n\t\tcafes: [],\n\t\tisLoading: true\n\t};\n\n\tgetCafes = async() => {\n\t\tconst {data} = await axios.post(\"/getcafes\");\n\t\tthis.setState(current => ({\n\t\t\tcafes: data, \n\t\t\tisLoading: false\n\t\t}));\n\t}\n\n\tasync\tcomponentDidMount(){\n\t\tawait this.getCafes();\n\t\tconsole.log(\"DID mount!\");\n\t}\n\n\tcomponentDidUpdate(){\n\n\t}\n\t\n\trender() {\n  \t//const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n   \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\n\n\t\tconst {isLoading, cafes} = this.state;\n\n  \treturn (\n\n\n\t\t\t\t<NaverMap\n\t\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\t\theight: '85vh' // 네이버지도 세로 길이\n\t\t\t\t\t}}\n\t\t\t\t\tdefaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\n\t\t\t\t\tdefaultZoom={13} // 지도 초기 확대 배율\n\t\t\t\t>\n\t\t\t\n\t\t\t\t\t{ cafes.map((cafe, index) => (\n\t\t\t\t\t\t<CafeMarker lat={cafe.lat} lng={cafe.lon} key={index}/>\n\t\t\t\t\t))}\n\n\n\t\t\t\t</NaverMap>\n\t\t);\n\t}\n}\n*/\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}