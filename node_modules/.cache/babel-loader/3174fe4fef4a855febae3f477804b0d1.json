{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/cafein_server/client/src/components/Map.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\n\nimport CafeMarker from './Cafemarker';\nvar HOME_PATH = window.HOME_PATH || '.';\nvar map = new naver.maps.Map('map', {\n  center: new naver.maps.LatLng(37.3595704, 127.105399),\n  zoom: 10\n});\nvar bounds = map.getBounds(),\n    southWest = bounds.getSW(),\n    northEast = bounds.getNE(),\n    lngSpan = northEast.lng() - southWest.lng(),\n    latSpan = northEast.lat() - southWest.lat();\nvar markers = [];\n\nfor (var key in MARKER_SPRITE_POSITION) {\n  var position = new naver.maps.LatLng(southWest.lat() + latSpan * Math.random(), southWest.lng() + lngSpan * Math.random());\n  var marker = new naver.maps.Marker({\n    map: map,\n    position: position,\n    title: key,\n    icon: {\n      url: HOME_PATH + '/img/example/sp_pins_spot_v3.png',\n      size: new naver.maps.Size(24, 37),\n      anchor: new naver.maps.Point(12, 37),\n      origin: new naver.maps.Point(MARKER_SPRITE_POSITION[key][0], MARKER_SPRITE_POSITION[key][1])\n    },\n    zIndex: 100\n  });\n  markers.push(marker);\n}\n\n;\nnaver.maps.Event.addListener(map, 'idle', function () {\n  updateMarkers(map, markers);\n});\n\nfunction updateMarkers(map, markers) {\n  var mapBounds = map.getBounds();\n  var marker, position;\n\n  for (var i = 0; i < markers.length; i++) {\n    marker = markers[i];\n    position = marker.getPosition();\n\n    if (mapBounds.hasLatLng(position)) {\n      showMarker(map, marker);\n    } else {\n      hideMarker(map, marker);\n    }\n  }\n}\n\nfunction showMarker(map, marker) {\n  if (marker.getMap()) return;\n  marker.setMap(map);\n}\n\nfunction hideMarker(map, marker) {\n  if (!marker.getMap()) return;\n  marker.setMap(null);\n}\n\nconst useAxios = url => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  const [trigger, setTrigger] = useState(0);\n\n  const refetch = () => {\n    setState({\n      loading: true\n    });\n    setTrigger(Date.now());\n  };\n\n  const getData = async () => {\n    const result = await axios.post(url);\n    setState({\n      data: result.data,\n      loading: false,\n      error: null\n    });\n\n    if (result.error) {\n      setState({\n        data: result.data,\n        loading: false,\n        error: result.error\n      });\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [trigger]);\n\n  if (!url) {\n    return;\n  }\n\n  return {\n    state,\n    refetch\n  };\n};\n\nconst Map = () => {\n  const {\n    state,\n    refetch\n  } = useAxios(\"/getcafes\");\n  const {\n    data,\n    loading,\n    error\n  } = state;\n  const cafes = data;\n\n  if (cafes) {\n    let d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n\n    let cur_hour = d.getHours();\n\n    for (let i = 0; i < cafes.length; i++) {\n      // 마커 이미지를 생성합니다\n      const regex = /[\\[\\]]/;\n      let arr = cafes[i].busy.split(regex);\n      let filtered = arr.filter(function (el) {\n        return el != \"\" && el != \", \";\n      });\n      let cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n      let cur_busy_color;\n\n      if (cur_busy >= 80) {\n        // red (Busy : 80-100)\n        cur_busy_color = \"red\";\n      } else if (cur_busy >= 40) {\n        // yellow (Busy : 40-59)\n        cur_busy_color = \"yellow\";\n      } else if (cur_busy >= 0) {\n        // green (Busy : 0-39)\n        cur_busy_color = \"green\";\n      } else if (cur_busy == -1) {\n        // grey (Busy : not_opened)\n        cur_busy_color = \"grey\";\n      } else {\n        //예외처리\n        console.log(\"it is wrong busy data\");\n        continue;\n      }\n\n      cafes[i]['cur_busy_color'] = cur_busy_color;\n      cafes[i]['cur_busy'] = cur_busy.toString();\n    }\n  } //const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n  //const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: refetch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 4\n    }\n  }, \"Refetch\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }\n  }, loading && \"Loading\"), /*#__PURE__*/React.createElement(NaverMap, {\n    mapDivId: 'maps-getting-started-uncontrolled' // default: react-naver-map\n    ,\n    style: {\n      width: '100%',\n      // 네이버지도 가로 길이\n      height: '85vh' // 네이버지도 세로 길이\n\n    },\n    defaultCenter: {\n      lat: 37.554722,\n      lng: 126.970833\n    } // 지도 초기 위치\n    ,\n    defaultZoom: 13 // 지도 초기 확대 배율\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }\n  }, cafes && cafes.map((cafe, index) => /*#__PURE__*/React.createElement(CafeMarker, {\n    lat: cafe.lat,\n    lng: cafe.lon,\n    busy: cafe.cur_busy,\n    busy_color: cafe.cur_busy_color,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 6\n    }\n  }))));\n};\n\nexport default Map;","map":{"version":3,"sources":["/home/ec2-user/cafein_server/client/src/components/Map.js"],"names":["React","useState","useEffect","axios","NaverMap","CafeMarker","HOME_PATH","window","map","naver","maps","Map","center","LatLng","zoom","bounds","getBounds","southWest","getSW","northEast","getNE","lngSpan","lng","latSpan","lat","markers","key","MARKER_SPRITE_POSITION","position","Math","random","marker","Marker","title","icon","url","size","Size","anchor","Point","origin","zIndex","push","Event","addListener","updateMarkers","mapBounds","i","length","getPosition","hasLatLng","showMarker","hideMarker","getMap","setMap","useAxios","state","setState","data","loading","error","trigger","setTrigger","refetch","Date","now","getData","result","post","cafes","d","day_of_week","getDay","cur_hour","getHours","regex","arr","busy","split","filtered","filter","el","cur_busy","cur_busy_color","console","log","toString","width","height","cafe","index","lon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\nimport CafeMarker from './Cafemarker';\n\n\nvar HOME_PATH = window.HOME_PATH || '.';\n\nvar map = new naver.maps.Map('map', {\n    center: new naver.maps.LatLng(37.3595704, 127.105399),\n    zoom: 10\n});\n\nvar bounds = map.getBounds(),\n    southWest = bounds.getSW(),\n    northEast = bounds.getNE(),\n    lngSpan = northEast.lng() - southWest.lng(),\n    latSpan = northEast.lat() - southWest.lat();\n\nvar markers = [];\n\nfor (var key in MARKER_SPRITE_POSITION) {\n\n    var position = new naver.maps.LatLng(\n        southWest.lat() + latSpan * Math.random(),\n        southWest.lng() + lngSpan * Math.random());\n\n    var marker = new naver.maps.Marker({\n        map: map,\n        position: position,\n        title: key,\n        icon: {\n            url: HOME_PATH +'/img/example/sp_pins_spot_v3.png',\n            size: new naver.maps.Size(24, 37),\n            anchor: new naver.maps.Point(12, 37),\n            origin: new naver.maps.Point(MARKER_SPRITE_POSITION[key][0], MARKER_SPRITE_POSITION[key][1])\n        },\n        zIndex: 100\n    });\n\n    markers.push(marker);\n};\n\nnaver.maps.Event.addListener(map, 'idle', function() {\n    updateMarkers(map, markers);\n});\n\nfunction updateMarkers(map, markers) {\n\n    var mapBounds = map.getBounds();\n    var marker, position;\n\n    for (var i = 0; i < markers.length; i++) {\n\n        marker = markers[i]\n        position = marker.getPosition();\n\n        if (mapBounds.hasLatLng(position)) {\n            showMarker(map, marker);\n        } else {\n            hideMarker(map, marker);\n        }\n    }\n}\n\nfunction showMarker(map, marker) {\n\n    if (marker.getMap()) return;\n    marker.setMap(map);\n}\n\nfunction hideMarker(map, marker) {\n\n    if (!marker.getMap()) return;\n    marker.setMap(null);\n}\n\n\nconst useAxios = (url) => {\n\tconst [state, setState] = useState({\n\t\tdata: null,\n\t\tloading: true,\n\t\terror: null\n\t});\n\n\tconst [trigger, setTrigger] = useState(0);\n\n\tconst refetch = () => { \n\t\tsetState({\n\t\t\tloading: true\n\t\t});\n\t\tsetTrigger(Date.now());\n\t};\n\n\tconst getData = async () => {\n\t\tconst result = await axios.post(url);\n\t\tsetState({\n\t\t\tdata: result.data,\n\t\t\tloading: false,\n\t\t\terror: null\n\t\t});\n\t\tif (result.error) {\n\t\t\tsetState({data:result.data, loading:false, error:result.error});\n\t\t}\n\t};\n\n\tuseEffect(() => { getData(); }, [trigger]);\n\tif (!url) {\n\t\treturn;\n\t}\n\treturn {state, refetch};\n};\n\n\n\nconst Map = () => {\n\tconst { state, refetch } = useAxios(\"/getcafes\");\n\tconst {data, loading, error} = state;\n\t\n\tconst cafes = data;\n\n\tif (cafes) { \n\n  \tlet d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n    let cur_hour = d.getHours();\n\t\tfor (let i = 0; i < cafes.length; i ++) {\n\t\t\t// 마커 이미지를 생성합니다\n\n\t\t\tconst regex = /[\\[\\]]/;\n\t\t\tlet arr = cafes[i].busy.split(regex);\n\t\t\tlet filtered = arr.filter(function (el) {\n\t\t\t\treturn el != \"\" && el != \", \";\n\t\t\t});\n\n\t\t\tlet cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n\n\t\t\tlet cur_busy_color; \n\t\t\tif (cur_busy >= 80) {\n\t\t\t// red (Busy : 80-100)\n\t\t\t\tcur_busy_color = \"red\"; \n\t\t\t} else if (cur_busy >= 40) {\n\t\t\t// yellow (Busy : 40-59)\n\t\t\t\tcur_busy_color = \"yellow\"; \n\t\t\t} else if (cur_busy >= 0) {\n\t\t\t// green (Busy : 0-39)\n\t\t\t\tcur_busy_color = \"green\"; \n\t\t\t} else if (cur_busy == -1) {\n\t\t\t// grey (Busy : not_opened)\n\t\t\t\tcur_busy_color = \"grey\"; \n\t\t\t} else {\n\t\t\t//예외처리\n\t\t\t\tconsole.log(\"it is wrong busy data\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcafes[i]['cur_busy_color'] = cur_busy_color;\n\t\t\tcafes[i]['cur_busy'] = cur_busy.toString();\n\t\t\t\n\t\t}\n\t}\n\n \t//const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n \treturn (\n\t\t<div>\n\t\t\t<button onClick={refetch}>Refetch</button>\n\t\t\t<h2>{loading && \"Loading\" }</h2>\n\t\t\t<NaverMap\n\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\theight: '85vh' // 네이버지도 세로 길이\n\t\t\t\t}}\n\t\t\t\tdefaultCenter={{ lat: 37.554722, lng: 126.970833 }} // 지도 초기 위치\n\t\t\t\tdefaultZoom={13} // 지도 초기 확대 배율\n\t\t\t>\n\t\t\t\t{ cafes  && cafes.map((cafe, index) => (\n\t\t\t\t\t<CafeMarker lat={cafe.lat} lng={cafe.lon} busy={cafe.cur_busy} busy_color={cafe.cur_busy_color} key={index}/>\n\t\t\t\t))}\n\t\t\n\t\t\t</NaverMap>\n\t\t</div>\n\t);\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}