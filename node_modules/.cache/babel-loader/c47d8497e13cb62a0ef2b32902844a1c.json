{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/cafein_server/client/src/components/Map.js\";\nimport React, { useState, useEffect } from 'react';\nimport './Map.css';\nimport axios from 'axios';\nimport { gql } from 'apollo-boost';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\n\nimport CafeMarker from './Cafemarker';\nimport GpsMarker from './Gpsmarker';\nimport { getCurrentLocation } from './../utils/utils';\n\nconst useAxios = url => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: null\n  });\n  const [trigger, setTrigger] = useState(0);\n\n  const refetch = () => {\n    setState({\n      loading: true\n    });\n    setTrigger(Date.now());\n  };\n\n  const getData = async () => {\n    const result = await axios.post(url);\n    setState({\n      data: result.data,\n      loading: false,\n      error: null\n    });\n\n    if (result.error) {\n      setState({\n        data: result.data,\n        loading: false,\n        error: result.error\n      });\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, [trigger]);\n\n  if (!url) {\n    return;\n  }\n\n  return {\n    state,\n    refetch\n  };\n};\n/*\nconst watchPosition = () => {\n  if (navigator.geolocation) {\n\t\tconst watchId = navigator.geolocation.watchPosition(function(position) {\n\t\t\tconsole.log(position.coords);\n\t\t\tsetUserPos(position.coords);\n\t\t});\n  } \n}\n*/\n\n\nconst Map = ({\n  markerStatus,\n  onCafeClick\n}) => {\n  //  const { state, refetch } = useAxios(\"/getcafes\");   \n  //  const {data, error} = state;   // 임시데이터 안쓰면 주석 해제\t\t\t\t\t\t\t\n  // const {data: {getMarkerStatus: markerStatus}} = useQuery(GET_MARKER_STATUS);\n  let data = [{\n    name: '할리스커피 고대안암점',\n    lat: 37.5847549,\n    lon: 127.0292435,\n    busy: '[[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]]',\n    outlet: -1,\n    seat: -1,\n    area: -1,\n    noise: -1\n  }, {\n    name: '고양시카페',\n    lat: 37.6231076,\n    lon: 126.83512239999999,\n    busy: '[[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]]',\n    outlet: -1,\n    seat: -1,\n    area: -1,\n    noise: -1\n  }]; //getCurrentLocation();\n\n  let mapRef;\n  let [mapBounds, setBounds] = useState(0); // 맵 전체 크기  \n\n  let [center, setCenter] = useState({\n    lat: 37.5668144,\n    lng: 126.9783882\n  }); // 지도의 center 값\n\n  let [zoom, setZoom] = useState(0); // 지도의 zoom 값\n\n  let [posChanged, setPosChanged] = useState(0); // 지도 position 변화 감지.\n\n  let [userPos, setUserPos] = useState(0); // user GPS Position \n  // Get GPS Position data \n\n  useEffect(() => {\n    async function getPosData() {\n      const cur_pos = await getCurrentLocation();\n\n      if (cur_pos) {\n        setCenter(cur_pos);\n        setUserPos(cur_pos);\n      }\n    }\n\n    getPosData();\n  }, [posChanged]); // Get Map Center data\n\n  useEffect(() => {\n    setBounds(mapRef.getBounds());\n  }, [center]);\n  const cafes = data;\n  let render_cafes = [];\n\n  if (cafes) {\n    let d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n\n    let cur_hour = d.getHours();\n\n    for (let i = 0; i < cafes.length; i++) {\n      // 마커 이미지를 생성합니다\n      // 보여지는 마커 최대 갯수 50개로 제한\n      if (render_cafes.length >= 50) {\n        break;\n      }\n\n      const regex = /[\\[\\]]/;\n      let arr = cafes[i].busy.split(regex);\n      let filtered = arr.filter(function (el) {\n        return el !== \"\" && el !== \", \";\n      });\n      let cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n      let cur_busy_color;\n\n      if (cur_busy >= 80) {\n        // red (Busy : 80-100)\n        cur_busy_color = \"red\";\n      } else if (cur_busy >= 40) {\n        // yellow (Busy : 40-59)\n        cur_busy_color = \"yellow\";\n      } else if (cur_busy >= 0) {\n        // green (Busy : 0-39)\n        cur_busy_color = \"green\";\n      } else if (cur_busy === '-1.0') {\n        // grey (Busy : not_opened)\n        cur_busy_color = \"grey\";\n      } else {\n        //예외처리\n        console.log(\"it is wrong busy data\");\n        continue;\n      }\n\n      cafes[i]['cur_busy_color'] = cur_busy_color;\n      cafes[i]['cur_busy'] = cur_busy.toString();\n      const navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n      // mapBounds 안에 있는 marker만 render 하도록 \n\n      if (mapBounds && mapBounds.hasLatLng(navermaps.LatLng(cafes[i].lat, cafes[i].lon))) {\n        render_cafes.push(cafes[i]);\n      }\n    }\n  } //const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n  //\t\t<button onClick={refetch}>Refetch</button> \n  //\t\t<h2>{loading && \"Loading\" }</h2>\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(NaverMap, {\n    mapDivId: 'maps-getting-started-uncontrolled' // default: react-naver-map\n    ,\n    naverRef: ref => {\n      mapRef = ref;\n    },\n    style: {\n      width: '100%',\n      // 네이버지도 가로 길이\n      height: '100%' // 네이버지도 세로 길이\n\n    },\n    defaultCenter: {\n      lat: 37.5668144,\n      lng: 126.9783882\n    } // 지도 초기 위치\n    ,\n    center: center,\n    defaultZoom: 16 // 지도 초기 확대 배율\n    ,\n    onCenterChanged: center_pos => {\n      setCenter(center_pos);\n    },\n    onZoomChanged: zoomListener => {\n      setZoom(zoomListener);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 4\n    }\n  }, render_cafes && render_cafes.map((cafe, index) => /*#__PURE__*/React.createElement(CafeMarker, {\n    lat: cafe.lat,\n    lng: cafe.lon,\n    busy: cafe.cur_busy,\n    busy_color: cafe.cur_busy_color,\n    cafe_name: cafe.name,\n    key: index,\n    markerStatus: markerStatus,\n    onCafeClick: onCafeClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 6\n    }\n  })), userPos && /*#__PURE__*/React.createElement(GpsMarker, {\n    lat: userPos.lat,\n    lng: userPos.lng,\n    key: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 18\n    }\n  }))));\n};\n\nexport default Map;","map":{"version":3,"sources":["/home/ec2-user/cafein_server/client/src/components/Map.js"],"names":["React","useState","useEffect","axios","gql","NaverMap","CafeMarker","GpsMarker","getCurrentLocation","useAxios","url","state","setState","data","loading","error","trigger","setTrigger","refetch","Date","now","getData","result","post","Map","markerStatus","onCafeClick","name","lat","lon","busy","outlet","seat","area","noise","mapRef","mapBounds","setBounds","center","setCenter","lng","zoom","setZoom","posChanged","setPosChanged","userPos","setUserPos","getPosData","cur_pos","getBounds","cafes","render_cafes","d","day_of_week","getDay","cur_hour","getHours","i","length","regex","arr","split","filtered","filter","el","cur_busy","cur_busy_color","console","log","toString","navermaps","window","naver","maps","hasLatLng","LatLng","push","ref","width","height","center_pos","zoomListener","map","cafe","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Map.css';\nimport axios from 'axios';\nimport { gql } from 'apollo-boost';\nimport { NaverMap } from 'react-naver-maps'; // 패키지 불러오기\nimport CafeMarker from './Cafemarker';\nimport GpsMarker from './Gpsmarker';\nimport { getCurrentLocation } from './../utils/utils';\n\n\n\n\nconst useAxios = (url) => {\n\tconst [state, setState] = useState({\n\t\tdata: null,\n\t\tloading: true,\n\t\terror: null\n\t});\n\n\tconst [trigger, setTrigger] = useState(0);\n\n\tconst refetch = () => { \n\t\tsetState({\n\t\t\tloading: true\n\t\t});\n\t\tsetTrigger(Date.now());\n\t};\n\n\tconst getData = async () => {\n\t\tconst result = await axios.post(url);\n\t\tsetState({\n\t\t\tdata: result.data,\n\t\t\tloading: false,\n\t\t\terror: null\n\t\t});\n\t\tif (result.error) {\n\t\t\tsetState({data:result.data, loading:false, error:result.error});\n\t\t}\n\t};\n\n\tuseEffect(() => { getData(); }, [trigger]);\n\tif (!url) {\n\t\treturn;\n\t}\n\treturn {state, refetch};\n};\n\n\n\n/*\nconst watchPosition = () => {\n  if (navigator.geolocation) {\n\t\tconst watchId = navigator.geolocation.watchPosition(function(position) {\n\t\t\tconsole.log(position.coords);\n\t\t\tsetUserPos(position.coords);\n\t\t});\n  } \n}\n*/\n\n\n\nconst Map = ({markerStatus, onCafeClick}) => {\n\t//  const { state, refetch } = useAxios(\"/getcafes\");   \n\t//  const {data, error} = state;   // 임시데이터 안쓰면 주석 해제\t\t\t\t\t\t\t\n// const {data: {getMarkerStatus: markerStatus}} = useQuery(GET_MARKER_STATUS);\n\n\n\n\tlet data = [{\n\t\tname: '할리스커피 고대안암점',\n\t\tlat: 37.5847549,\n\t\tlon: 127.0292435,\n\t\tbusy: '[[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]]',\n\t\toutlet: -1,\n\t\tseat: -1,\n\t\tarea: -1,\n\t\tnoise: -1\n\t},\n\t{\n\t\tname: '고양시카페',\n\t\tlat: 37.6231076,\n\t\tlon: 126.83512239999999,\n\t\tbusy: '[[-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0], [-1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]]',\n\t\toutlet: -1,\n\t\tseat: -1,\n\t\tarea: -1,\n\t\tnoise: -1\n\t}];\n\n\n\n\t//getCurrentLocation();\n\tlet mapRef;\n\t\n\t\n\tlet [mapBounds, setBounds] = useState(0); // 맵 전체 크기  \n\tlet [center, setCenter] = useState({lat:37.5668144, lng:126.9783882}); // 지도의 center 값\n\tlet [zoom, setZoom] = useState(0); // 지도의 zoom 값\n\tlet [posChanged, setPosChanged] = useState(0); // 지도 position 변화 감지.\n\tlet [userPos, setUserPos] = useState(0); // user GPS Position \n\n\n\t// Get GPS Position data \n\tuseEffect(() => {\n  \tasync function getPosData() {\n\t\t\tconst cur_pos = await getCurrentLocation();\n\t\t\tif (cur_pos) {\n\t\t\t\tsetCenter(cur_pos);\n\t\t\t\tsetUserPos(cur_pos);\n\t\t\t}\n  \t}\n\t\tgetPosData();\n\t}, [posChanged]);\n\n\n\t// Get Map Center data\n\tuseEffect(() => { \n\t\tsetBounds(mapRef.getBounds());\n\t }, [center]);\n\n\n\n\tconst cafes = data;\n\tlet render_cafes = [];\n\n\tif (cafes) { \n  \tlet d = new Date();\n    let day_of_week = d.getDay(); // sunday : 0, mon : 1, ...\n    let cur_hour = d.getHours();\n\t\tfor (let i = 0; i < cafes.length; i ++) {\n\t\t\t// 마커 이미지를 생성합니다\n\n\n\t\t\t// 보여지는 마커 최대 갯수 50개로 제한\n\t\t\tif (render_cafes.length >= 50) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst regex = /[\\[\\]]/;\n\t\t\tlet arr = cafes[i].busy.split(regex);\n\t\t\tlet filtered = arr.filter(function (el) {\n\t\t\t\treturn el !== \"\" && el !== \", \";\n\t\t\t});\n\n\t\t\tlet cur_busy = filtered[day_of_week].split(', ')[cur_hour];\n\n\t\t\tlet cur_busy_color; \n\t\t\tif (cur_busy >= 80) {\n\t\t\t// red (Busy : 80-100)\n\t\t\t\tcur_busy_color = \"red\"; \n\t\t\t} else if (cur_busy >= 40) {\n\t\t\t// yellow (Busy : 40-59)\n\t\t\t\tcur_busy_color = \"yellow\"; \n\t\t\t} else if (cur_busy >= 0) {\n\t\t\t// green (Busy : 0-39)\n\t\t\t\tcur_busy_color = \"green\"; \n\t\t\t} else if (cur_busy === '-1.0') {\n\t\t\t// grey (Busy : not_opened)\n\t\t\t\tcur_busy_color = \"grey\"; \n\t\t\t} else {\n\t\t\t//예외처리\n\t\t\t\tconsole.log(\"it is wrong busy data\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcafes[i]['cur_busy_color'] = cur_busy_color;\n\t\t\tcafes[i]['cur_busy'] = cur_busy.toString();\n\t\t\t\n \t\t\tconst navermaps = window.naver.maps; // 혹은 withNavermaps hoc을 사용\n\n\t\t\t// mapBounds 안에 있는 marker만 render 하도록 \n\t\t\tif (mapBounds && mapBounds.hasLatLng(navermaps.LatLng(cafes[i].lat,cafes[i].lon))){\n\t\t\t\trender_cafes.push(cafes[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t\n \t//const latlng = new navermaps.LatLng(37.3595704, 127.105399)\n\t//\t\t<button onClick={refetch}>Refetch</button> \n\t//\t\t<h2>{loading && \"Loading\" }</h2>\n \treturn (\n\t\t <>\n\t\t<div className=\"map_container\">\n\t\t\t<NaverMap\n\t\t\t\tmapDivId={'maps-getting-started-uncontrolled'} // default: react-naver-map\n\t\t\t\tnaverRef={ref => { mapRef = ref}}\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%', // 네이버지도 가로 길이\n\t\t\t\t\theight: '100%' // 네이버지도 세로 길이\n\t\t\t\t}}\n\t\t\t\tdefaultCenter={{lat: 37.5668144, lng: 126.9783882}} // 지도 초기 위치\n\t\t\t\tcenter={center}\n\t\t\t\tdefaultZoom={16} // 지도 초기 확대 배율\n\t\t\t\tonCenterChanged={center_pos => { setCenter(center_pos) }}\n\t\t\t\tonZoomChanged={zoomListener => { setZoom(zoomListener) }}\n\t\t\t>\n\t\t\t\t{ render_cafes  && render_cafes.map((cafe, index) => (\n\t\t\t\t\t<CafeMarker lat={cafe.lat} lng={cafe.lon} busy={cafe.cur_busy} busy_color={cafe.cur_busy_color} cafe_name={cafe.name} key={index} markerStatus={markerStatus} onCafeClick={onCafeClick}/>\n\t\t\t\t))}\n\n\t\t\t\t{ userPos && <GpsMarker lat={userPos.lat} lng={userPos.lng} key='1'/> }\n\t\t\n\t\t\t</NaverMap>\n\t\t</div>\n\t\t\n\t\t</>\n\n\t);\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}